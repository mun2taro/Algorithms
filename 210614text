
AtCoder Programming Guide for beginners

再帰関数

    int sum(int n) {
      if (n == 0) {
        return 0;
      }
    
      // sum関数の中でsum関数を呼び出している
      int s = sum(n - 1);
      return s + n;
    }

「sum関数の中でsum関数を呼び出しています。このような関数呼び出しのことを再帰呼び出しと言います。」

このコードでわかりづらいことがある


    int s = sum(n - 1);

この部分

定義したときの引数は整数型の変数nにしている
関数を定義しているその中で定義した関数を呼び出しているのはわかるがその引数の表現方法
sum(n - 1)となっているが、引数に演算子と値を入れることが可能だったのかということ
引数を定義した時は定義した時の指定する引数として表現して、関数を呼び出す時に指定する引数とは別に表現するべきか
説明にはどちらも引数になっていてややこしい


      return s + n;

この部分
returnのこのnの値の状態はどうなっているのか
例えば引数に3を入れれば
if文のn == 0になるまで3回関数を再帰させることになる
ただ呼び出された再帰する関数は関数で同じ処理をすることなる
ここが難しい
時間軸がまったくわからない
一応コンピューターは順次処理をしているはずなので並列で処理しないかぎり順番があるはず
ただこの順番はC++の場合機械語にする時のコンパイル時に決まるものであろうことは推測できる
となるとコードを書く時には並行して処理がされるとして考えたほうが都合が良いだろうか

とくにややこしいのがこの変数sとnの状態の変化
まったくわからない
if文にあるn == 0になるまで3回処理をするのはわかる　3回引かないの0にならないから
では、1回引いた時はnの値は2になるがその時は2がsに代入されるのがわかる
そしてreturn文である
s+nのsは2であることはわかる
ではnの値はどうなっているのか？　これがわからない

そこで並列して処理しているイメージを持ってみる

①3-1で2なのでif文の条件式n == 0に当てはまらないので関数を再帰させることになる
②2-1は1なのでこれもまた条件式に当てはまらないまた関数を再帰させることになる
③1-1は0なので条件式に当てはまる　ここで関数の再帰はストップしてif文のreturnにある0の値が返される

ここで重要なのは①と②の間では順次処理として

    return s + n;

の処理まで走らないのではないかという話
つまりなんどもif文の条件式に合致するまで再帰関数が呼び出される
そのまんまである　何度も何度も関数が再帰する
そして呼び出された関数は呼び出された関数の数だけ処理を行うことになるのではないかということ
つまりこのs+nが3回呼び出されたら3回計算をしてreturnとして返してるということではないか

順番としてはまずは3回再帰して呼び出す
3回目はif文の処理が動いてreturnの0が返される
次に2回目に再帰した関数が動く　そのまま計算すれば2回目なので既に1が引かれておりnの値は2になる　そしてn-1つまり2-1は1なので変数sに1が代入される　2回目の再帰関数は最後まで処理するのでこの場合sは1が格納されており、nには2が格納されている
いやこれはおかしい　計算結果　2回目に再帰した関数は1+2の処理を行い3のreturnが返されてしまう
どこかが間違っている

returnが実行された関数はその下の処理は行われない決まりだったのは関数を学んだ時に理解していたはず

もう一度整理をしてみると、この再帰関数sumに与えられる引数は3である
①まずは3に対する処理がおこなわれる　-1の処理がされ2の値が再帰させる関数の引数になる
2の値を引数として関数を再帰させて処理することになる　
②再帰させた関数には2の値に対して-1の処理が行われて1の値が再帰させる関数の引数になる
1の値を引数として関数を再帰させて処理することになる
③再帰させた関数には1の値に対して-1の処理が行われて0の値が再帰させる関数の引数になる
0の値を引数として関数を再帰させて処理することになる
④再帰させた関数には0の値だとif文の条件式が n == 0の場合 returnとして0を返すことになる
ここで処理が終了するはず

ここまで見ると関数sumは引数が3,2,1,0それぞれに処理を行っていることがわかる
つまり関数sumは4回処理をしていることになる
3回処理をしているというのは間違いであった

もう一度考えてみる

returnにたどり着くと処理は終了する
なので4番目の再帰した関数は0をreturnして終わる
そこまではわかる
ただ①と②と③の関数は終わっていない
どうやら③②①の順番で再帰した関数を終わらせるのがC++における再帰関数の仕様なようだ
③ではnの値は1であり、1-1は0なので代入される変数sは0である
関数内でも順次処理なので既に算術処理で-1されたnの値は0なのでreturn = 0 + 0となり③の再帰された関数のreturnは0になる
あとは②①ともに上の計算をnが2の場合nが3の場合で計算するだけでそれぞれreturnする値1と2になることがわかる

よって3を引数にした場合この関数が出力するのは0+0+1+2になり3になることがわかる

しかしここで疑問がでる

4回も関数を処理して4回returnさせているのなら出力されるのは0012になるのではないか？
returnされた値を足していく繰り返し処理も格納する変数もコードには見られない
これはよくわからない

今日はここまで
