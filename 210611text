多次元配列について

作った多次元配列へアクセスして値を取り出す方法
配列の中の配列の中の配列の中の････みたいな具体的に表現できない
抽象的な概念を文字だけで法則性をもって表すことがとても難しく壁であることは前回わかった

今回はそんな複雑なc++の法則やきまりで宣言した多次元配列を作った後にその多次元配列を運用する方法を学ぶ

アクセス
N次元配列の要素にアクセスするには次のように書きます。

    変数名.at(添字1).at(添字2).at(添字3) ... .at(添字N)

.at(添字)をN回繰り返します。
変数名ではなく配列名では？
なぜ添え字か
添え字は添え字で処理するスコープ内で多次元配列への繰り返し処理時の入力時の値がそのまま使えるから

![](https://paper-attachments.dropbox.com/s_7AABAE05F174A1FD05F2E96B011D5519F716CE8F3A9E34F2C420FAA81FE606EC_1623378295890_2.03.5+1.png)


配列の中の配列は繰り返し文で決めたカウンタ変数の添え字で区別するのは画期的だと思う
入力と出力とも一貫した定義づけ出来る

配列の処理は繰り返し処理時のカウンタ変数を要素数と同期した扱いをするのが運用するための大事なポイントだと思った

要素を指定して初期化する

    // 2次元配列の初期化
    vector<vector<int>> data1 = {
      {7, 4, 0, 8},
      {2, 0, 3, 5},
      {6, 1, 7, 0}
    };
    
    // 3次元配列の初期化
    vector<vector<vector<char>>> data2 = {
      {
        {'-', '-', '-'},
        {'-', 'x', '-'},
        {'-', 'o', '-'}
      },
      {
        {'x', 'o', '-'},
        {'-', 'o', '-'},
        {'x', '-', '-'}
      }
    };

各要素のスコープの理解が大変

確認の為に書いてみた

    #include <bits/stdc++.h>
    using namespace std;
    int main() {//多次元配列書いてみる
      vector<vector<vector<char>>> data(3, vector<vector<char>>(3, vector<char>(3)));//まずは宣言
        for (int i = 0; i < 3; i++) {// i番目の状態を読む
          for (int j = 0; j < 3; j++) {// j番目の状態を読む
            for (int k = 0; k < 3; k++) {// k番目の状態を読む
               cin >> data.at(i).at(j).at(k);//入力する為の繰り返し処理
          }
        }
      }
        for (int i = 0; i < 3; i++) {
          for (int j = 0; j < 3; j++) { 
             for (int k = 0; k < 3; k++) {
            cout << data.at(i).at(j).at(k) << endl;//そのまま出力してみる
          }
        }
      }
      }

入力
987654321
出力
9
8
7
6
5
4
3
2
1

とりあえず問題は無さそうだ

調べもの

https://qiita.com/e869120/items/518297c6816adb67f9a5


なぜこれを調べたか
アルゴリズムの学習に必要な情報を探していてこの情報が使えると推測したため

感想
C++に標準でついてる機能についての解説だった
ただ機能そのものの動作や処理よりも、機能そのものがもつ意味そのものがわからないので理解しようがない内容だった(絶対値、三角関数、スタック、キューなどの概念)
これらの根本的な概念の理解はそれぞれ相当の時間をかけないと達成できないもので学びだすとまた別に時間を計画的に考えて取らないといけないものになる
三角関数はそのまま高校数学だし、スタックとキューはコンピュータサイエンスで習うものだ
触りだけ勉強しているから、そういうものがある程度の認識があるものの初見だと途方にくれるしかないと思う
この解説の著者は図など簡便な方法で解説していた
この高校二年生はすごい

結局学ぶにしては自分の基礎知識が足りないことがわかったので、次の機能のついて学ぶ

参照

ざっと解説を見てみる


- `参照先の型 &参照の名前 = 参照先;`で参照を宣言できる
- 通常の変数のように参照を宣言するときは参照先を指定する必要がある
- 関数の引数に参照を用いる場合は、その関数を呼び出す時に渡した変数が参照先になる
- 参照先を後から変更することはできない
- 引数が参照になっている関数を呼び出すことを参照渡しという
- 参照渡しは、無駄なコピーを避けたり複数の結果を返したいときに便利

よくわからない

前知識では変数の中にある値を見るだけ(参照する)だけで変数の中の値には影響を及ぼさない仕組みとか機能のことだと認識している

コードを見てみる

参照

参照の機能を使うと、ある変数に別名を付けるようなことができます。
ある変数への参照を作ったとき、参照からその変数へアクセスすることができます。
次の例を見てください。

    #include <bits/stdc++.h>
    using namespace std;
    
    int main() {
      int a = 3;
      int &b = a;  // bは変数aの参照
    
      cout << "a: " << a << endl;  // aの値を出力
      cout << "b: " << b << endl;  // bの参照先の値を出力(aの値である3が出力される)
    
      b = 4;  // 参照先の値を変更(aが4になる)
    
      cout << "a: " << a << endl;  // aの値を出力
      cout << "b: " << b << endl;  // bの参照先の値を出力(aの値である4が出力される)
    }

実行結果

    a: 3
    b: 3
    a: 4
    b: 4

この例では、変数`a`を参照する`b`という参照を用意して、`b = 4;`と書き換えています。 その結果、`a`の値が4に変更されています。 参照`b`は変数`a`と同じように(`a`であるかのように)振る舞っています。
変数の宣言方法と似ていますが、通常の変数とは違い参照変数自体の値にアクセスすることはできません。 参照変数に対してアクセスを行うように書くと、そのアクセスが参照先についてなされるイメージです。

参照`b`が変数aの値に影響を与えている
以前の認識が間違っていたのか

改めて学ぶ必要があるようだ
