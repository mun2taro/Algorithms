
AtCoder Programming Guide for beginners

参照

この例では、変数`a`を参照する`b`という参照を用意して、`b = 4;`と書き換えています。 その結果、`a`の値が4に変更されています。 参照`b`は変数`a`と同じように(`a`であるかのように)振る舞っています。
変数の宣言方法と似ていますが、通常の変数とは違い参照変数自体の値にアクセスすることはできません。 参照変数に対してアクセスを行うように書くと、そのアクセスが参照先についてなされるイメージです。

参照`b`が変数aの値に影響を与えている
以前の認識が間違っていたのか

改めて学ぶ必要があるようだ

昨日はここまで

続きをはじめる

よくよく見てみると

「通常の変数とは違い参照変数自体の値にアクセスすることはできません」とある
しかしサンプルコードではこの説明を意味することがまったくわからない

続きを見てみる

参照は次のように宣言します。

    参照先の型 &参照の名前 = 参照先;

基本的には宣言時に参照先を指定して初期化する必要がある点に注意してください。

初期化とは=のことだろう
つまり宣言することは初期化することになるということか

変数hogeを参照する変数を作るのか
変数hogeを参照する参照を作るのか
そもそも参照って値へのアクセス方法や機能のことであって、コード上で表す固有名詞として使うものではない気がしてきた

「変数aを参照するbという参照を用意して」って書き方してた
え　参照は参照という枠で区別するのか？

「変数の宣言方法と似ていますが、通常の変数とは違い参照変数自体の値にアクセスすることはできません。 参照変数に対してアクセスを行うように書くと、そのアクセスが参照先についてなされるイメージです」
抽象的だ
進めてみる

値渡し

通常の関数(値渡し)
まずは参照を用いない関数の例です。

    #include <bits/stdc++.h>
    using namespace std;
    
    int f(int x) {
      x = x * 2;  // 2. xを2倍
      return x;   // 3. xの値を返す
    }
    
    int main() {
      int a = 3;  // "呼び出す側の変数"
      int b = f(a);  // 1. aの値をfに渡し、4. 結果をbに代入
      cout << "a: " << a << endl;
      cout << "b: " << b << endl;
    }

実行結果

    a: 3
    b: 6

順を追ってプログラムの動きを確認します。

1. `f(a)`で`f`に`a`を渡します。このとき、`f`の引数の`x`に`int x = a;`のように`a`の値がコピーされます。つまり、`x` = 3です。
2. `f`の内部では`x`を2倍します。
3. 変更後の値を返します。`x` = 3なので、2倍されて`x` = 6となり、6が返されます。
4. `int b = f(a);`で結果をbにコピーします。
5. `a` = 3, `b` = 6となります。

`int b = f(a);`の呼び出しを展開してみると次のプログラムのようになります。

    #include <bits/stdc++.h>
    using namespace std;
    
    int main() {
      int a = 3;  // "呼び出す側の変数"
      int b;
        // int b = f(a); を展開
        {
          int x = a;  // aの値がxにコピーされる(引数)
          x *= 2;     // xが2倍される
          b = x;      // xの値がbに代入される(返り値)
        }
      cout << "a: " << a << endl;  // "a: 3"
      cout << "b: " << b << endl;  // "b: 6"
    }

このように、渡した変数の値がコピーされるような渡し方を値渡しといいます。

「変数の値がコピーされるような渡し方を値渡し」
コピーされるような　か　覚えておこう
次の解説を見てみる

引数が参照になっている関数(参照渡し)
次に、引数を参照にした関数の例です。

    #include <bits/stdc++.h>
    using namespace std;
    
    int g(int &x) {
      x = x * 2;  // xを2倍 (参照によって"呼び出す側の変数"が変更される)
      return x;
    }
    
    int main() {
      int a = 3;  // 関数を呼び出す側の変数
      int b = g(a);  // xの参照先がaになる
      cout << "a: " << a << endl;
      cout << "b: " << b << endl;
    }

実行結果

    a: 6
    b: 6

`g`の呼び出しの前後で、変数`a`の値が変わっていることが分かります。
「参照の宣言」では宣言時に参照先を指定して初期化する必要があると書きましたが、引数を参照にした場合は、 呼び出し時に渡した変数が参照先となります。
上のプログラムでは引数の`x`が参照であり、参照先が呼び出す側の`a`になるので、関数内で`x`を書き換えると`a`の値が変更されます。
`int b = g(a);`の呼び出しを展開してみると次のプログラムのようになります。

    #include <bits/stdc++.h>
    using namespace std;
    
    int main() {
      int a = 3;  // "呼び出す側の変数"
      int b;
        // int b = g(a); を展開
        {
          int &x = a; // xの参照先がaになる
          x *= 2;     // xが2倍される(つまりaが2倍される)
          b = x;      // xの値(aの値)がbに代入される
        }
      cout << "a: " << a << endl;  // "a: 6"
      cout << "b: " << b << endl;  // "b: 6"
    }

このように、渡した変数が参照引数の参照先になるような呼び出し方を参照渡しといいます。

参照渡しで気が付いたが
参照は変数を直接使いたい処理があるが、別名を使う必要がありそういう時に使うものか
