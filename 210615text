
AtCoder Programming Guide for beginners

再帰関数

    int sum(int n) {
      if (n == 0) {
        return 0;
      }
    
      // sum関数の中でsum関数を呼び出している
      int s = sum(n - 1);
      return s + n;
    }

引数を3としてこの関数を呼び出した結果は0~3の総和を求めるので3+2+1+0なので6になるはず
昨日は間違えて3と計算していた
なぜ間違えたのかもう一度確認してみる


      int s = sum(n - 1);
      return s + n;

この1行目は呼び出した関数をsに格納しているだけで
次のs+nのreturnの処理が走るのは

    int s = sum(n - 1);

の全ステップの処理が走り終えるまでなのか
答えは6なので各ステップのreturnされる値を知る必要がある
各ステップのreturn s + nの状態がどうなっているかまったくわからない

以下のif文は最後のステップで実行するので今は置いておく

      if (n == 0) {
        return 0;
      }

次の解説を見てみる

「引数の異なる呼び出しでは別の関数を呼んでいる」と考えるといいです。
上の例で`sum(3)`を呼び出したときの動作を書き出してみます。

- `sum(3)`では`sum(2)`を呼び出してその結果に3を足して返します。
- `sum(2)`では`sum(1)`を呼び出してその結果に2を足して返します。
- `sum(1)`では`sum(0)`を呼び出してその結果に1を足して返します。
- `sum(0)`は0を返します。

ここで、呼び出される`sum(3), sum(2), sum(1), sum(0)`をそれぞれ別々の関数に切り出して考えてみると次のようになります。

    #include <bits/stdc++.h>
    using namespace std;
    
    // 0~0の総和を求める
    int sum0() {
      return 0;
    }
    // 0~1の総和を求める
    int sum1() {
      int s = sum0();
      return s + 1;  // (0~0の総和) + 1 = 1
    }
    // 0~2の総和を求める
    int sum2() {
      int s = sum1();
      return s + 2;  // (0~1の総和) + 2 = 3
    }
    // 0~3の総和を求める
    int sum3() {
      int s = sum2();
      return s + 3;  // (0~2の総和) + 3 = 6
    }
    
    int main() {
      cout << sum3() << endl;  // 6
    }

実行結果

    6

これは

    cout << sum3() << endl;

sum3
sum2
sum1
sum0
の順番で呼び出して再帰処理を具体的に示したものとのこと
これならわかりやすい
まずはじめのsum3ではnの値が3になってる
これでひとつの謎が解けた
次にsum2sum1sum0と順に2+1になり最終的にsum0が返す値は０となり
sの中の値はすべての関数で0となる
難しい
これだとnの値が決まる時間とsの値が決まる時間が別々であるということではないか？
処理の法則性がわからないことには処理の手順であるプログラムを書くことは出来ない

次の解説を見てみる

再帰関数が正しく動作するのは再帰呼び出しの連鎖に終わりがあるからです。 この例では`n`が初めに呼び出されたときの値から1ずつ減っていき、0になるとif文によって分岐され、それ以上再帰呼出しが起こらなくなり、 呼び出しの連鎖が終わるのでうまく動きます

これはわかる


再帰関数の性質

実装法を紹介する前に再帰関数の性質をまとめておきます。
再帰関数の内容は大きく分けると以下の2つの処理に分類できます。

- ベースケース：再帰呼び出しを行わずに完了できる処理
- 再帰ステップ：再帰呼出しを行い、その結果を用いて行う処理


    // n を受け取って、0~n の総和を計算して返す関数
    int sum(int n) {
      // ベースケース
      if (n == 0) {
        return 0;
      }
    
      // 再帰ステップ
      int s = sum(n - 1);
      return s + n;
    }

また、再帰関数が正しく動作するためには次の条件を満たす必要があります。

- 再帰呼び出しの連鎖に終わりがある

この条件を満たさない場合、無限ループになってしまいます。

ここまで再帰処理内のデータの値の順番やタイミング上の変化の記述なし

今日はここまで
